import random

class RandomNameGenerator:
    def __init__(self):
        """Initialize the name generator with different name databases"""
        # Modern/Contemporary names
        self.modern_first_names = {
            'male': ['Alexander', 'Benjamin', 'Christopher', 'Daniel', 'Ethan', 'Felix', 'Gabriel', 'Henry', 'Isaac', 'James'],
            'female': ['Ava', 'Bella', 'Charlotte', 'Diana', 'Emma', 'Fiona', 'Grace', 'Hannah', 'Isabella', 'Julia'],
            'neutral': ['Alex', 'Blake', 'Cameron', 'Drew', 'Emery', 'Finley', 'Grey', 'Harper', 'Indigo', 'Jordan']
        }
        
        self.modern_last_names = ['Anderson', 'Brown', 'Davis', 'Garcia', 'Johnson', 'Martinez', 'Miller', 'Rodriguez', 'Smith', 'Wilson']
        
        # Fantasy names
        self.fantasy_first_names = {
            'male': ['Aldric', 'Branthor', 'Caelum', 'Darian', 'Eowyn', 'Fenris', 'Gareth', 'Hadrian', 'Ignatius', 'Jareth'],
            'female': ['Ariana', 'Brielle', 'Celestine', 'Delphine', 'Evangeline', 'Freya', 'Guinevere', 'Helena', 'Isolde', 'Jasmine'],
            'neutral': ['Aiden', 'Blaine', 'Cypress', 'Dara', 'Echo', 'Fable', 'Grey', 'Haven', 'Ira', 'Joren']
        }
        
        self.fantasy_last_names = ['Brightblade', 'Dragonheart', 'Frostborn', 'Goldleaf', 'Ironforge', 'Moonwhisper', 'Shadowmere', 'Starweaver', 'Thornfield', 'Windrunner']
        
        # Sci-fi names
        self.scifi_first_names = {
            'male': ['Axel', 'Blaze', 'Cypher', 'Dex', 'Echo', 'Flux', 'Grid', 'Hex', 'Ion', 'Jax'],
            'female': ['Aria', 'Beta', 'Cyber', 'Delta', 'Eva', 'Flux', 'Gamma', 'Halo', 'Iris', 'Jinx'],
            'neutral': ['Alpha', 'Binary', 'Chrome', 'Data', 'Eon', 'Fiber', 'Ghost', 'Haze', 'Iota', 'Jinx']
        }
        
        self.scifi_last_names = ['Neosync', 'Voidwalker', 'Quantech', 'Starforge', 'Cyberlink', 'Nanocore', 'Plasmaburn', 'Techbane', 'Ultrawave', 'Xenotech']
        
        # Historical names (Medieval)
        self.historical_first_names = {
            'male': ['Aldwin', 'Bartholomew', 'Cedric', 'Duncan', 'Edmund', 'Frederick', 'Geoffrey', 'Harold', 'Ivan', 'Jasper'],
            'female': ['Adelaide', 'Beatrice', 'Cordelia', 'Dorothea', 'Eleanor', 'Felicity', 'Gwendolyn', 'Henrietta', 'Isadora', 'Josephine'],
            'neutral': ['Aubrey', 'Blair', 'Courtney', 'Dana', 'Emery', 'Francis', 'Glenn', 'Haven', 'Ivory', 'Jules']
        }
        
        self.historical_last_names = ['Ashford', 'Blackwood', 'Cromwell', 'Dunmore', 'Fairfax', 'Grimsby', 'Hartwell', 'Lancaster', 'Pemberton', 'Whitmore']

    def display_menu(self):
        """Display the main menu options"""
        print("\n" + "="*50)
        print("ðŸŽ² RANDOM NAME GENERATOR ðŸŽ²")
        print("="*50)
        print("Choose a genre:")
        print("1. Modern/Contemporary")
        print("2. Fantasy")
        print("3. Sci-Fi")
        print("4. Historical (Medieval)")
        print("5. Random Mix (Any genre)")
        print("6. Exit")
        print("-"*50)

    def display_gender_menu(self):
        """Display gender options"""
        print("\nChoose name type:")
        print("1. Male")
        print("2. Female") 
        print("3. Gender-neutral")
        print("4. Random")

    def get_user_choice(self, prompt, valid_options):
        """Get and validate user input"""
        while True:
            try:
                choice = input(prompt).strip()
                if choice in valid_options:
                    return choice
                else:
                    print(f"Please enter a valid option: {', '.join(valid_options)}")
            except KeyboardInterrupt:
                print("\n\nGoodbye!")
                exit()

    def generate_name(self, genre, gender):
        """Generate a random name based on genre and gender"""
        # Select appropriate name database
        if genre == "modern":
            first_names = self.modern_first_names
            last_names = self.modern_last_names
        elif genre == "fantasy":
            first_names = self.fantasy_first_names
            last_names = self.fantasy_last_names
        elif genre == "scifi":
            first_names = self.scifi_first_names
            last_names = self.scifi_last_names
        elif genre == "historical":
            first_names = self.historical_first_names
            last_names = self.historical_last_names
        else:  # random mix
            # Randomly choose a genre
            genres = ["modern", "fantasy", "scifi", "historical"]
            chosen_genre = random.choice(genres)
            return self.generate_name(chosen_genre, gender)
        
        # Select gender category
        if gender == "random":
            gender = random.choice(['male', 'female', 'neutral'])
        
        # Generate the name
        first_name = random.choice(first_names[gender])
        last_name = random.choice(last_names)
        
        return f"{first_name} {last_name}"

    def generate_multiple_names(self, genre, gender, count=5):
        """Generate multiple names at once"""
        names = []
        for _ in range(count):
            names.append(self.generate_name(genre, gender))
        return names

    def run(self):
        """Main program loop"""
        print("Welcome to the Interactive Random Name Generator!")
        
        while True:
            self.display_menu()
            
            # Get genre choice
            genre_choice = self.get_user_choice(
                "Enter your choice (1-6): ", 
                ['1', '2', '3', '4', '5', '6']
            )
            
            if genre_choice == '6':
                print("\nThanks for using the Random Name Generator! Goodbye! ðŸ‘‹")
                break
                
            # Map choice to genre
            genre_map = {
                '1': 'modern',
                '2': 'fantasy', 
                '3': 'scifi',
                '4': 'historical',
                '5': 'random'
            }
            genre = genre_map[genre_choice]
            
            # Get gender choice
            self.display_gender_menu()
            gender_choice = self.get_user_choice(
                "Enter your choice (1-4): ",
                ['1', '2', '3', '4']
            )
            
            # Map choice to gender
            gender_map = {
                '1': 'male',
                '2': 'female',
                '3': 'neutral', 
                '4': 'random'
            }
            gender = gender_map[gender_choice]
            
            # Ask how many names to generate
            while True:
                try:
                    count = int(input("\nHow many names would you like? (1-20): "))
                    if 1 <= count <= 20:
                        break
                    else:
                        print("Please enter a number between 1 and 20.")
                except ValueError:
                    print("Please enter a valid number.")
            
            # Generate and display names
            print(f"\nðŸŽ¯ Generated {count} {genre.title()} {gender.title()} Name(s):")
            print("-" * 40)
            
            names = self.generate_multiple_names(genre, gender, count)
            for i, name in enumerate(names, 1):
                print(f"{i:2d}. {name}")
            
            # Ask if user wants to continue
            print("\n" + "-" * 40)
            continue_choice = input("Generate more names? (y/n): ").lower().strip()
            if continue_choice not in ['y', 'yes']:
                print("\nThanks for using the Random Name Generator! Goodbye! ðŸ‘‹")
                break

# Run the program
if __name__ == "__main__":
    generator = RandomNameGenerator()
    generator.run()
