# Animal Detector for Google Colab
# Simple program to detect animals in images using YOLOv5

import torch
import cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from google.colab import files
import io

class AnimalDetector:
    def __init__(self):
        """Initialize the animal detector with YOLOv5 model"""
        print("Loading YOLOv5 model...")
        # Load YOLOv5 model (will download automatically if not present)
        self.model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)
        
        # COCO dataset animal classes
        self.animal_classes = {
            14: 'bird', 15: 'cat', 16: 'dog', 17: 'horse', 18: 'sheep', 
            19: 'cow', 20: 'elephant', 21: 'bear', 22: 'zebra', 23: 'giraffe'
        }
        
        print("Model loaded successfully!")
    
    def detect_animals(self, image_path):
        """Detect animals in the given image"""
        # Load image
        img = Image.open(image_path)
        
        # Perform detection
        results = self.model(img)
        
        # Extract detections
        detections = results.pandas().xyxy[0]
        
        # Filter for animal classes only
        animal_detections = detections[detections['class'].isin(self.animal_classes.keys())]
        
        return img, animal_detections, results
    
    def visualize_results(self, img, detections, results):
        """Visualize detection results"""
        # Create figure with subplots
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Original image
        ax1.imshow(img)
        ax1.set_title('Original Image')
        ax1.axis('off')
        
        # Image with detections
        img_with_boxes = np.array(results.render()[0])
        ax2.imshow(img_with_boxes)
        ax2.set_title('Animal Detection Results')
        ax2.axis('off')
        
        plt.tight_layout()
        plt.show()
        
        # Print detection summary
        if len(detections) > 0:
            print(f"\nüêæ Found {len(detections)} animals:")
            for idx, detection in detections.iterrows():
                animal_name = self.animal_classes[detection['class']]
                confidence = detection['confidence']
                print(f"  - {animal_name.capitalize()}: {confidence:.2f} confidence")
        else:
            print("\n‚ùå No animals detected in this image")
    
    def detect_from_upload(self):
        """Upload and detect animals in user's image"""
        print("Please upload an image file:")
        uploaded = files.upload()
        
        for filename in uploaded.keys():
            print(f"\nProcessing {filename}...")
            
            # Save uploaded file
            with open(filename, 'wb') as f:
                f.write(uploaded[filename])
            
            # Detect animals
            img, detections, results = self.detect_animals(filename)
            
            # Visualize results
            self.visualize_results(img, detections, results)
    
    def detect_from_url(self, url):
        """Detect animals from image URL"""
        try:
            # Download image from URL
            import requests
            response = requests.get(url)
            img = Image.open(io.BytesIO(response.content))
            
            # Save temporarily
            img.save('temp_image.jpg')
            
            # Detect animals
            img, detections, results = self.detect_animals('temp_image.jpg')
            
            # Visualize results
            self.visualize_results(img, detections, results)
            
        except Exception as e:
            print(f"Error processing URL: {e}")

def main():
    """Main function to run the animal detector"""
    print("üêæ Animal Detector - Google Colab Edition üêæ")
    print("=" * 50)
    
    # Initialize detector
    detector = AnimalDetector()
    
    print("\nChoose an option:")
    print("1. Upload your own image")
    print("2. Use sample image from URL")
    print("3. Both options")
    
    choice = input("\nEnter your choice (1/2/3): ").strip()
    
    if choice in ['1', '3']:
        print("\n--- Upload Your Image ---")
        detector.detect_from_upload()
    
    if choice in ['2', '3']:
        print("\n--- Sample Image Detection ---")
        # Sample image URL with animals
        sample_url = "https://images.unsplash.com/photo-1583337130417-3346a1be7dee?w=800"
        print(f"Using sample image: {sample_url}")
        detector.detect_from_url(sample_url)

# Installation instructions (run this cell first)
def install_requirements():
    """Install required packages"""
    import subprocess
    import sys
    
    packages = [
        'torch',
        'torchvision',
        'opencv-python',
        'Pillow',
        'matplotlib',
        'pandas',
        'requests'
    ]
    
    for package in packages:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
        except:
            print(f"Note: {package} may already be installed")

# Uncomment and run this line if you need to install packages
# install_requirements()

# Run the main program
if __name__ == "__main__":
    main()
