import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from datetime import datetime
import numpy as np
from IPython.display import display, clear_output

class TaxRecordKeeper:
    def __init__(self):
        """Initialize the Tax Record Keeper with empty data structures"""
        # Create an empty DataFrame for storing transactions
        self.transactions = pd.DataFrame(columns=[
            'date', 'description', 'amount', 'category', 
            'tax_deductible', 'tax_rate', 'tax_amount'
        ])
        
        # Define category options for transactions
        self.categories = [
            'Income', 'Business Expense', 'Personal Expense', 
            'Investment', 'Donation', 'Other'
        ]
        
        # Define default tax rates for different categories
        self.default_tax_rates = {
            'Income': 0.20,
            'Business Expense': 0.0,
            'Personal Expense': 0.0,
            'Investment': 0.15,
            'Donation': 0.0,
            'Other': 0.0
        }
        
        # Set file path for saving data
        self.data_file = 'tax_records.csv'
        
        # Load existing data if available
        self.load_data()
        
        # Set color theme for visualizations
        sns.set_theme(style="whitegrid")
        self.colors = sns.color_palette("Set2")
    
    def load_data(self):
        """Load existing transaction data from CSV if it exists"""
        if os.path.exists(self.data_file):
            try:
                self.transactions = pd.read_csv(self.data_file)
                # Convert date strings back to datetime objects
                self.transactions['date'] = pd.to_datetime(self.transactions['date'])
                print(f"Loaded {len(self.transactions)} existing transactions.")
            except Exception as e:
                print(f"Error loading data: {e}")
    
    def save_data(self):
        """Save transaction data to CSV file"""
        try:
            self.transactions.to_csv(self.data_file, index=False)
            print("Data saved successfully.")
        except Exception as e:
            print(f"Error saving data: {e}")
    
    def add_transaction(self):
        """Add a new transaction with user input"""
        print("\n--- Add New Transaction ---")
        
        # Get transaction details from user
        date_str = input("Date (YYYY-MM-DD, leave blank for today): ")
        if date_str.strip() == "":
            date = datetime.now()
        else:
            try:
                date = datetime.strptime(date_str, "%Y-%m-%d")
            except ValueError:
                print("Invalid date format. Using today's date.")
                date = datetime.now()
        
        description = input("Description: ")
        
        # Get amount with validation
        while True:
            try:
                amount = float(input("Amount ($): "))
                break
            except ValueError:
                print("Please enter a valid number.")
        
        # Display and select category
        print("\nCategories:")
        for i, category in enumerate(self.categories, 1):
            print(f"{i}. {category}")
        
        while True:
            try:
                cat_choice = int(input("Select category (number): "))
                if 1 <= cat_choice <= len(self.categories):
                    category = self.categories[cat_choice - 1]
                    break
                else:
                    print(f"Please enter a number between 1 and {len(self.categories)}.")
            except ValueError:
                print("Please enter a valid number.")
        
        # Is it tax deductible?
        tax_deductible_input = input("Is this tax deductible? (y/n): ").lower()
        tax_deductible = tax_deductible_input in ['y', 'yes', 'true']
        
        # Set tax rate
        default_rate = self.default_tax_rates[category]
        tax_rate_input = input(f"Tax rate (default is {default_rate*100}%): ")
        if tax_rate_input.strip() == "":
            tax_rate = default_rate
        else:
            try:
                tax_rate = float(tax_rate_input) / 100  # Convert percentage to decimal
            except ValueError:
                print(f"Invalid input. Using default rate of {default_rate*100}%")
                tax_rate = default_rate
        
        # Calculate tax amount
        if category == 'Income':
            tax_amount = amount * tax_rate
        elif tax_deductible:
            tax_amount = amount * tax_rate * -1  # Negative to indicate tax saving
        else:
            tax_amount = 0
        
        # Create new transaction
        new_transaction = pd.DataFrame({
            'date': [date],
            'description': [description],
            'amount': [amount],
            'category': [category],
            'tax_deductible': [tax_deductible],
            'tax_rate': [tax_rate],
            'tax_amount': [tax_amount]
        })
        
        # Add to transactions dataframe
        self.transactions = pd.concat([self.transactions, new_transaction], ignore_index=True)
        
        print(f"\nTransaction added: {description}, ${amount:.2f}")
        print(f"Tax impact: ${tax_amount:.2f}")
        
        # Save after each transaction
        self.save_data()
    
    def view_transactions(self):
        """Display all transactions in a formatted way"""
        if len(self.transactions) == 0:
            print("No transactions found.")
            return
        
        print("\n--- Transaction History ---")
        # Create a copy of the DataFrame for display purposes
        display_df = self.transactions.copy()
        
        # Format columns for better display
        display_df['date'] = display_df['date'].dt.strftime('%Y-%m-%d')
        display_df['amount'] = display_df['amount'].apply(lambda x: f"${x:.2f}")
        display_df['tax_rate'] = display_df['tax_rate'].apply(lambda x: f"{x*100:.1f}%")
        display_df['tax_amount'] = display_df['tax_amount'].apply(lambda x: f"${x:.2f}")
        
        # Display the DataFrame
        display(display_df)
    
    def generate_summary(self):
        """Generate and display a summary of tax information"""
        if len(self.transactions) == 0:
            print("No transactions found.")
            return
        
        print("\n--- Tax Summary ---")
        
        # Calculate total income and expenses
        income = self.transactions[self.transactions['category'] == 'Income']['amount'].sum()
        expenses = self.transactions[self.transactions['category'] != 'Income']['amount'].sum()
        
        # Calculate total tax amount
        tax_total = self.transactions['tax_amount'].sum()
        
        # Calculate deductions
        deductions = self.transactions[self.transactions['tax_deductible']]['amount'].sum()
        
        print(f"Total Income: ${income:.2f}")
        print(f"Total Expenses: ${expenses:.2f}")
        print(f"Total Tax Deductions: ${deductions:.2f}")
        print(f"Estimated Tax Liability: ${tax_total:.2f}")
        
        # Calculate effective tax rate
        if income > 0:
            effective_tax_rate = (tax_total / income) * 100
            print(f"Effective Tax Rate: {effective_tax_rate:.2f}%")
    
    def visualize_data(self):
        """Create and display various visualizations of the tax data"""
        if len(self.transactions) == 0:
            print("No transactions found. Add some transactions first.")
            return
        
        print("\n--- Data Visualizations ---")
        
        # Create a figure with subplots
        fig, axs = plt.subplots(2, 2, figsize=(15, 12))
        
        # Plot 1: Income vs Expenses pie chart
        ax1 = axs[0, 0]
        income = self.transactions[self.transactions['category'] == 'Income']['amount'].sum()
        expense_by_category = self.transactions[self.transactions['category'] != 'Income'].groupby('category')['amount'].sum()
        
        labels = ['Income'] + expense_by_category.index.tolist()
        sizes = [income] + expense_by_category.values.tolist()
        
        ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=self.colors)
        ax1.set_title('Income vs Expenses by Category')
        
        # Plot 2: Monthly transaction totals
        ax2 = axs[0, 1]
        # Extract month and year from date
        self.transactions['month_year'] = self.transactions['date'].dt.strftime('%Y-%m')
        
        # Group by month and category
        monthly_data = self.transactions.groupby(['month_year', 'category'])['amount'].sum().unstack().fillna(0)
        
        monthly_data.plot(kind='bar', stacked=True, ax=ax2, colormap='Set2')
        ax2.set_title('Monthly Transactions by Category')
        ax2.set_xlabel('Month')
        ax2.set_ylabel('Amount ($)')
        plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)
        
        # Plot 3: Tax impact over time
        ax3 = axs[1, 0]
        tax_by_month = self.transactions.groupby('month_year')['tax_amount'].sum()
        
        ax3.bar(tax_by_month.index, tax_by_month.values, color=self.colors[0])
        ax3.set_title('Tax Impact by Month')
        ax3.set_xlabel('Month')
        ax3.set_ylabel('Tax Amount ($)')
        plt.setp(ax3.xaxis.get_majorticklabels(), rotation=45)
        
        # Add a horizontal line at zero
        ax3.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        # Plot 4: Tax deductible vs. non-deductible expenses
        ax4 = axs[1, 1]
        deductible = self.transactions[self.transactions['tax_deductible'] & (self.transactions['category'] != 'Income')]['amount'].sum()
        non_deductible = self.transactions[(~self.transactions['tax_deductible']) & (self.transactions['category'] != 'Income')]['amount'].sum()
        
        ax4.bar(['Tax Deductible', 'Non-Deductible'], [deductible, non_deductible], color=[self.colors[1], self.colors[2]])
        ax4.set_title('Tax Deductible vs Non-Deductible Expenses')
        ax4.set_ylabel('Amount ($)')
        
        # Adjust layout and display the plot
        plt.tight_layout()
        plt.show()
    
    def run(self):
        """Main method to run the tax record keeper program"""
        while True:
            print("\n==== Tax Record Keeper ====")
            print("1. Add Transaction")
            print("2. View All Transactions")
            print("3. Generate Tax Summary")
            print("4. Visualize Data")
            print("5. Exit")
            
            choice = input("\nSelect an option (1-5): ")
            
            if choice == '1':
                self.add_transaction()
            elif choice == '2':
                self.view_transactions()
            elif choice == '3':
                self.generate_summary()
            elif choice == '4':
                self.visualize_data()
            elif choice == '5':
                print("Thank you for using Tax Record Keeper. Exiting...")
                break
            else:
                print("Invalid choice. Please try again.")

# Run the program when executed
if __name__ == "__main__":
    tax_keeper = TaxRecordKeeper()
    tax_keeper.run()
