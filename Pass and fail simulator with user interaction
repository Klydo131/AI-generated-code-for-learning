# Interactive Student Pass/Fail Automation System
# Users can add, modify, and delete student records with real-time pass/fail evaluation
# Passing score: 85% (customizable)

import pandas as pd
import os
from datetime import datetime

class StudentGradingSystem:
    def __init__(self, passing_score=85):
        self.passing_score = passing_score
        self.students = []
        self.load_sample_data()
    
    def load_sample_data(self):
        """Load initial sample data"""
        sample_students = [
            {"Student ID": 1001, "Name": "Serrano, Ernesto", "Exam Score": 80},
            {"Student ID": 1002, "Name": "Bartolome, Caterina", "Exam Score": 67},
            {"Student ID": 1003, "Name": "Catalan, Venancio", "Exam Score": 81},
            {"Student ID": 1004, "Name": "Rojo, Abel", "Exam Score": 92},
            {"Student ID": 1005, "Name": "Amil, Charito", "Exam Score": 94}
        ]
        self.students = sample_students
        print("Sample data loaded successfully!")
    
    def determine_pass_fail(self, score):
        """Determine if a student passes or fails based on exam score"""
        if score >= self.passing_score:
            return "Passed"
        else:
            return "Failed"
    
    def display_students(self):
        """Display all students with their pass/fail status"""
        if not self.students:
            print("No students in the system.")
            return
        
        print(f"\n{'='*70}")
        print(f"STUDENT RECORDS - Passing Score: {self.passing_score}%")
        print(f"{'='*70}")
        print(f"{'ID':<8} {'Name':<25} {'Score':<8} {'Status':<8} {'Remark'}")
        print(f"{'-'*70}")
        
        passed_count = 0
        total_score = 0
        
        for student in self.students:
            student_id = student["Student ID"]
            name = student["Name"]
            score = student["Exam Score"]
            status = self.determine_pass_fail(score)
            
            if status == "Passed":
                passed_count += 1
                remark = "✓"
            else:
                remark = "✗"
            
            total_score += score
            print(f"{student_id:<8} {name:<25} {score:<8} {status:<8} {remark}")
        
        # Display statistics
        total_students = len(self.students)
        pass_rate = (passed_count / total_students) * 100 if total_students > 0 else 0
        avg_score = total_score / total_students if total_students > 0 else 0
        
        print(f"{'-'*70}")
        print(f"Total Students: {total_students} | Passed: {passed_count} | Failed: {total_students - passed_count}")
        print(f"Pass Rate: {pass_rate:.1f}% | Average Score: {avg_score:.1f}")
        print(f"{'='*70}")
    
    def add_student(self):
        """Add a new student to the system"""
        print("\n=== ADD NEW STUDENT ===")
        try:
            # Get student ID
            while True:
                student_id = input("Enter Student ID: ").strip()
                if not student_id:
                    print("Student ID cannot be empty!")
                    continue
                
                # Check if ID already exists
                if any(s["Student ID"] == student_id for s in self.students):
                    print(f"Student ID {student_id} already exists!")
                    continue
                
                try:
                    student_id = int(student_id)
                    break
                except ValueError:
                    print("Please enter a valid numeric Student ID!")
            
            # Get student name
            while True:
                name = input("Enter Student Name: ").strip()
                if name:
                    break
                print("Name cannot be empty!")
            
            # Get exam score
            while True:
                try:
                    score = float(input("Enter Exam Score (0-100): "))
                    if 0 <= score <= 100:
                        break
                    else:
                        print("Score must be between 0 and 100!")
                except ValueError:
                    print("Please enter a valid numeric score!")
            
            # Add student
            new_student = {
                "Student ID": student_id,
                "Name": name,
                "Exam Score": score
            }
            
            self.students.append(new_student)
            status = self.determine_pass_fail(score)
            
            print(f"\n✓ Student added successfully!")
            print(f"ID: {student_id} | Name: {name} | Score: {score} | Status: {status}")
            
        except KeyboardInterrupt:
            print("\nOperation cancelled.")
    
    def modify_student(self):
        """Modify an existing student's information"""
        if not self.students:
            print("No students in the system to modify.")
            return
        
        print("\n=== MODIFY STUDENT ===")
        self.display_students()
        
        try:
            student_id = int(input("\nEnter Student ID to modify: "))
            
            # Find student
            student_index = None
            for i, student in enumerate(self.students):
                if student["Student ID"] == student_id:
                    student_index = i
                    break
            
            if student_index is None:
                print(f"Student with ID {student_id} not found!")
                return
            
            current_student = self.students[student_index]
            print(f"\nCurrent Info: {current_student['Name']} | Score: {current_student['Exam Score']}")
            
            print("\nWhat would you like to modify?")
            print("1. Name only")
            print("2. Exam Score only")
            print("3. Both Name and Exam Score")
            
            choice = input("Enter choice (1-3): ").strip()
            
            if choice == "1":
                new_name = input(f"Enter new name (current: {current_student['Name']}): ").strip()
                if new_name:
                    self.students[student_index]["Name"] = new_name
                    print("✓ Name updated successfully!")
            
            elif choice == "2":
                while True:
                    try:
                        new_score = float(input(f"Enter new score (current: {current_student['Exam Score']}): "))
                        if 0 <= new_score <= 100:
                            self.students[student_index]["Exam Score"] = new_score
                            print("✓ Score updated successfully!")
                            break
                        else:
                            print("Score must be between 0 and 100!")
                    except ValueError:
                        print("Please enter a valid numeric score!")
            
            elif choice == "3":
                new_name = input(f"Enter new name (current: {current_student['Name']}): ").strip()
                if new_name:
                    self.students[student_index]["Name"] = new_name
                
                while True:
                    try:
                        new_score = float(input(f"Enter new score (current: {current_student['Exam Score']}): "))
                        if 0 <= new_score <= 100:
                            self.students[student_index]["Exam Score"] = new_score
                            break
                        else:
                            print("Score must be between 0 and 100!")
                    except ValueError:
                        print("Please enter a valid numeric score!")
                
                print("✓ Student information updated successfully!")
            
            else:
                print("Invalid choice!")
                return
            
            # Show updated info
            updated_student = self.students[student_index]
            status = self.determine_pass_fail(updated_student["Exam Score"])
            print(f"\nUpdated Info: {updated_student['Name']} | Score: {updated_student['Exam Score']} | Status: {status}")
            
        except (ValueError, KeyboardInterrupt):
            print("Operation cancelled or invalid input.")
    
    def delete_student(self):
        """Delete a student from the system"""
        if not self.students:
            print("No students in the system to delete.")
            return
        
        print("\n=== DELETE STUDENT ===")
        self.display_students()
        
        try:
            student_id = int(input("\nEnter Student ID to delete: "))
            
            # Find and remove student
            for i, student in enumerate(self.students):
                if student["Student ID"] == student_id:
                    deleted_student = self.students.pop(i)
                    print(f"✓ Student deleted: {deleted_student['Name']} (ID: {student_id})")
                    return
            
            print(f"Student with ID {student_id} not found!")
            
        except (ValueError, KeyboardInterrupt):
            print("Operation cancelled or invalid input.")
    
    def change_passing_score(self):
        """Change the passing score threshold"""
        print(f"\n=== CHANGE PASSING SCORE ===")
        print(f"Current passing score: {self.passing_score}%")
        
        try:
            while True:
                new_score = float(input("Enter new passing score (0-100): "))
                if 0 <= new_score <= 100:
                    self.passing_score = new_score
                    print(f"✓ Passing score updated to {new_score}%")
                    break
                else:
                    print("Passing score must be between 0 and 100!")
        
        except (ValueError, KeyboardInterrupt):
            print("Operation cancelled or invalid input.")
    
    def export_results(self):
        """Export results to a text file"""
        if not self.students:
            print("No students to export.")
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"student_results_{timestamp}.txt"
        
        try:
            with open(filename, 'w') as f:
                f.write(f"STUDENT PASS/FAIL REPORT\n")
                f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Passing Score: {self.passing_score}%\n")
                f.write(f"{'='*70}\n")
                f.write(f"{'ID':<8} {'Name':<25} {'Score':<8} {'Status':<8}\n")
                f.write(f"{'-'*70}\n")
                
                passed_count = 0
                total_score = 0
                
                for student in self.students:
                    student_id = student["Student ID"]
                    name = student["Name"]
                    score = student["Exam Score"]
                    status = self.determine_pass_fail(score)
                    
                    if status == "Passed":
                        passed_count += 1
                    
                    total_score += score
                    f.write(f"{student_id:<8} {name:<25} {score:<8} {status:<8}\n")
                
                total_students = len(self.students)
                pass_rate = (passed_count / total_students) * 100
                avg_score = total_score / total_students
                
                f.write(f"{'-'*70}\n")
                f.write(f"Total Students: {total_students} | Passed: {passed_count} | Failed: {total_students - passed_count}\n")
                f.write(f"Pass Rate: {pass_rate:.1f}% | Average Score: {avg_score:.1f}\n")
            
            print(f"✓ Results exported to: {filename}")
            
        except Exception as e:
            print(f"Error exporting file: {e}")

def main():
    """Main program loop"""
    system = StudentGradingSystem()
    
    print("🎓 INTERACTIVE STUDENT PASS/FAIL SYSTEM")
    print("=" * 50)
    
    while True:
        print("\n📋 MAIN MENU")
        print("1. View All Students")
        print("2. Add New Student")
        print("3. Modify Student")
        print("4. Delete Student")
        print("5. Change Passing Score")
        print("6. Export Results")
        print("7. Load Sample Data")
        print("8. Clear All Data")
        print("9. Exit")
        
        choice = input("\nEnter your choice (1-9): ").strip()
        
        if choice == "1":
            system.display_students()
        
        elif choice == "2":
            system.add_student()
        
        elif choice == "3":
            system.modify_student()
        
        elif choice == "4":
            system.delete_student()
        
        elif choice == "5":
            system.change_passing_score()
        
        elif choice == "6":
            system.export_results()
        
        elif choice == "7":
            system.load_sample_data()
        
        elif choice == "8":
            confirm = input("Are you sure you want to clear all data? (yes/no): ").strip().lower()
            if confirm == "yes":
                system.students = []
                print("✓ All data cleared!")
        
        elif choice == "9":
            print("👋 Thank you for using the Student Grading System!")
            break
        
        else:
            print("❌ Invalid choice! Please enter a number between 1-9.")

# Run the program
if __name__ == "__main__":
    main()
    
