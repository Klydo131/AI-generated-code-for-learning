import random
import time

def song_randomizer():
    """
    A function that allows users to input 3 songs and randomly selects 
    which song will be played first.
    """
    
    print("üéµ Welcome to the Song Randomizer! üéµ")
    print("=" * 40)
    
    # Initialize empty list to store songs
    songs = []
    
    # Collect 3 songs from the user
    print("\nPlease enter 3 songs:")
    for i in range(3):
        while True:  # Loop until user enters a valid song name
            song = input(f"Enter song #{i+1}: ").strip()
            if song:  # Check if song name is not empty
                songs.append(song)
                break
            else:
                print("Please enter a valid song name!")
    
    # Display the collected songs
    print(f"\nüìù Your song playlist:")
    print("-" * 25)
    for i, song in enumerate(songs, 1):
        print(f"{i}. {song}")
    
    # Add some suspense with a countdown
    print(f"\nüé≤ Randomly selecting which song plays first...")
    for i in range(3, 0, -1):
        print(f"‚è∞ {i}...")
        time.sleep(1)  # Wait 1 second between each countdown
    
    # Randomly select a song
    selected_song = random.choice(songs)
    
    # Display the result with some flair
    print(f"\nüéâ The randomly selected song is:")
    print("üåü" * 30)
    print(f"üéµ '{selected_song}' üéµ")
    print("üåü" * 30)
    
    # Show the complete play order
    remaining_songs = [song for song in songs if song != selected_song]
    random.shuffle(remaining_songs)  # Shuffle the remaining songs too
    
    print(f"\nüìã Complete randomized playlist order:")
    print(f"1st: {selected_song}")
    for i, song in enumerate(remaining_songs, 2):
        print(f"{i}rd: {song}" if i == 3 else f"{i}nd: {song}")
    
    return selected_song, songs

def run_multiple_rounds():
    """
    Function to run multiple rounds of the song randomizer
    """
    while True:
        # Run the main song randomizer
        selected_song, all_songs = song_randomizer()
        
        # Ask if user wants to run again
        print(f"\n" + "="*50)
        choice = input("Would you like to randomize again? (y/n): ").lower().strip()
        
        if choice in ['n', 'no']:
            print("\nüéµ Thanks for using Song Randomizer! Enjoy your music! üéµ")
            break
        elif choice not in ['y', 'yes']:
            print("Invalid input. Exiting program.")
            break
        
        print("\n" + "="*50)

# For demonstration purposes, let's also create a quick version
def quick_song_randomizer(song1, song2, song3):
    """
    Quick version that takes 3 songs as parameters
    Useful for testing or when you want to pass songs directly
    """
    songs = [song1, song2, song3]
    selected = random.choice(songs)
    
    print(f"Songs: {', '.join(songs)}")
    print(f"Randomly selected: '{selected}'")
    
    return selected

# Main execution
if __name__ == "__main__":
    print("Choose an option:")
    print("1. Interactive Song Randomizer")
    print("2. Quick Demo")
    
    try:
        choice = input("Enter your choice (1 or 2): ").strip()
        
        if choice == "1":
            # Run the interactive version
            run_multiple_rounds()
            
        elif choice == "2":
            # Run a quick demo
            print("\nüéµ Quick Demo with sample songs:")
            demo_song = quick_song_randomizer("Bohemian Rhapsody", "Imagine", "Hotel California")
            
        else:
            print("Invalid choice. Running interactive version by default.")
            run_multiple_rounds()
            
    except KeyboardInterrupt:
        print("\n\nProgram interrupted by user. Goodbye! üëã")
    except Exception as e:
        print(f"\nAn error occurred: {e}")
        print("Please try running the program again.")
