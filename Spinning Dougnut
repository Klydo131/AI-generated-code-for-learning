<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spinning ASCII Donut</title>
    <style>
        body {
            margin: 0;
            padding: 5px;
            background: #000;
            color: #fff;
            font-family: 'Courier New', monospace;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            overflow-x: hidden;
            width: 100vw;
            box-sizing: border-box;
        }
        
        #donut {
            font-size: 10px;
            line-height: 0.9;
            white-space: pre;
            letter-spacing: 0.5px;
            text-align: center;
            overflow-x: auto;
            max-width: 100vw;
            box-sizing: border-box;
        }
        
        .controls {
            margin-top: 15px;
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        button {
            padding: 6px 12px;
            background: #333;
            color: #fff;
            border: 1px solid #555;
            border-radius: 4px;
            cursor: pointer;
            font-family: inherit;
            font-size: 12px;
        }
        
        button:hover {
            background: #555;
        }
        
        .info {
            margin-top: 15px;
            text-align: center;
            font-size: 11px;
            color: #aaa;
            padding: 0 10px;
        }
    </style>
</head>
<body>
    <div id="donut"></div>
    
    <div class="controls">
        <button onclick="toggleAnimation()">Pause/Resume</button>
        <button onclick="changeSpeed(-0.02)">Slower</button>
        <button onclick="changeSpeed(0.02)">Faster</button>
    </div>
    
    <div class="info">
        The famous spinning donut - a classic 3D ASCII animation!<br>
        Original concept by Andy Sloane
    </div>

    <script>
        let A = 0, B = 0; // Rotation angles
        let speedA = 0.07, speedB = 0.03;
        let animationRunning = true;
        let animationId;
        
        const width = 30;
        const height = 18;
        const R1 = 1; // Inner radius of torus
        const R2 = 2; // Outer radius of torus
        const K2 = 5; // Distance from viewer
        const K1 = width * K2 * 3 / (8 * (R1 + R2)); // Screen distance
        
        function renderFrame() {
            const output = new Array(width * height).fill(' ');
            const zbuffer = new Array(width * height).fill(0);
            
            // Precompute sine and cosine values
            const cosA = Math.cos(A), sinA = Math.sin(A);
            const cosB = Math.cos(B), sinB = Math.sin(B);
            
            // Generate points on the torus
            for (let theta = 0; theta < 6.28; theta += 0.07) {
                const cosTheta = Math.cos(theta), sinTheta = Math.sin(theta);
                
                for (let phi = 0; phi < 6.28; phi += 0.02) {
                    const cosPhi = Math.cos(phi), sinPhi = Math.sin(phi);
                    
                    // 3D coordinates of point on torus
                    const circleX = R2 + R1 * cosTheta;
                    const circleY = R1 * sinTheta;
                    
                    // 3D coordinates after rotation
                    const x = circleX * (cosB * cosPhi + sinA * sinB * sinPhi) - circleY * cosA * sinB;
                    const y = circleX * (sinB * cosPhi - sinA * cosB * sinPhi) + circleY * cosA * cosB;
                    const z = K2 + cosA * circleX * sinPhi + circleY * sinA;
                    const ooz = 1 / z; // One over z (for perspective projection)
                    
                    // Project to 2D screen coordinates
                    const xp = Math.floor(width / 2 + K1 * ooz * x);
                    const yp = Math.floor(height / 2 - K1 * ooz * y);
                    
                    // Calculate luminance (lighting)
                    const L = cosPhi * cosTheta * sinB - cosA * cosTheta * sinPhi - sinA * sinTheta + cosB * (cosA * sinTheta - cosTheta * sinA * sinPhi);
                    
                    if (xp >= 0 && xp < width && yp >= 0 && yp < height) {
                        const idx = xp + yp * width;
                        if (ooz > zbuffer[idx]) {
                            zbuffer[idx] = ooz;
                            // Choose character based on luminance
                            const luminanceIndex = Math.floor(L * 8);
                            output[idx] = '.,-~:;=!*#$@'[Math.max(0, luminanceIndex)];
                        }
                    }
                }
            }
            
            // Convert to string and display
            let result = '';
            for (let j = 0; j < height; j++) {
                for (let i = 0; i < width; i++) {
                    result += output[i + j * width];
                }
                result += '\n';
            }
            
            document.getElementById('donut').textContent = result;
            
            // Update rotation angles
            A += speedA;
            B += speedB;
        }
        
        function animate() {
            if (animationRunning) {
                renderFrame();
                animationId = requestAnimationFrame(animate);
            }
        }
        
        function toggleAnimation() {
            animationRunning = !animationRunning;
            if (animationRunning) {
                animate();
            } else {
                cancelAnimationFrame(animationId);
            }
        }
        
        function changeSpeed(delta) {
            speedA += delta;
            speedB += delta * 0.5;
            // Prevent negative speeds
            speedA = Math.max(0.01, speedA);
            speedB = Math.max(0.005, speedB);
        }
        
        // Start the animation
        animate();
    </script>
</body>
</html>
