import json
import os
import random
from datetime import datetime

class FoodPreferenceTracker:
    """A class to track user's food preferences."""
    
    def __init__(self):
        """Initialize the food tracker with empty lists and load existing data if available."""
        self.food_database = {
            "favorites": [],
            "least_favorites": [],
            "neutral": [],
            "ratings": {}  # Store ratings for each food (1-10)
        }
        self.data_file = "food_preferences.json"
        self.load_data()
    
    def load_data(self):
        """Load existing food preference data from a JSON file if it exists."""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r') as file:
                    self.food_database = json.load(file)
                print("Previous food preferences loaded successfully!")
                # Display a summary of existing data
                print(f"You have {len(self.food_database['favorites'])} favorite foods.")
                print(f"You have {len(self.food_database['least_favorites'])} least favorite foods.")
                print(f"You have {len(self.food_database['neutral'])} neutral foods.")
        except Exception as e:
            print(f"Error loading data: {e}")
            print("Starting with a fresh food preference tracker.")
    
    def save_data(self):
        """Save the current food preference data to a JSON file."""
        try:
            with open(self.data_file, 'w') as file:
                json.dump(self.food_database, file, indent=4)
            print("Food preferences saved successfully!")
        except Exception as e:
            print(f"Error saving data: {e}")
    
    def add_food(self, food_name, rating=None):
        """
        Add a food item to the appropriate category based on rating.
        
        Args:
            food_name (str): Name of the food to add
            rating (int, optional): Rating from 1-10, if None user will be prompted
        """
        # Normalize food name (lowercase and strip whitespace)
        food_name = food_name.lower().strip()
        
        if not food_name:
            print("Error: Food name cannot be empty!")
            return
            
        # Get rating if not provided
        if rating is None:
            while True:
                try:
                    rating = int(input(f"Rate {food_name} from 1-10 (10 being best): "))
                    if 1 <= rating <= 10:
                        break
                    else:
                        print("Please enter a number between 1 and 10.")
                except ValueError:
                    print("Please enter a valid number.")
        
        # Store the rating
        self.food_database["ratings"][food_name] = rating
        
        # Categorize based on rating
        # Remove from all categories first to prevent duplicates
        self.remove_food_from_all_categories(food_name)
        
        # Add to appropriate category
        if rating >= 8:  # 8-10 is favorite
            self.food_database["favorites"].append(food_name)
            print(f"Added {food_name} to your favorites! (Rating: {rating}/10)")
        elif rating <= 3:  # 1-3 is least favorite
            self.food_database["least_favorites"].append(food_name)
            print(f"Added {food_name} to your least favorites. (Rating: {rating}/10)")
        else:  # 4-7 is neutral
            self.food_database["neutral"].append(food_name)
            print(f"Added {food_name} to your neutral foods. (Rating: {rating}/10)")
        
        # Save the updated data
        self.save_data()
    
    def remove_food_from_all_categories(self, food_name):
        """Remove a food item from all categories to prevent duplicates."""
        for category in ["favorites", "least_favorites", "neutral"]:
            if food_name in self.food_database[category]:
                self.food_database[category].remove(food_name)
    
    def remove_food(self, food_name):
        """Remove a food item completely from the tracker."""
        food_name = food_name.lower().strip()
        removed = False
        
        # Remove from categories
        for category in ["favorites", "least_favorites", "neutral"]:
            if food_name in self.food_database[category]:
                self.food_database[category].remove(food_name)
                removed = True
        
        # Remove rating if exists
        if food_name in self.food_database["ratings"]:
            del self.food_database["ratings"][food_name]
            removed = True
            
        if removed:
            print(f"Removed {food_name} from your food preferences.")
            self.save_data()
        else:
            print(f"Couldn't find {food_name} in your food preferences.")
    
    def suggest_food(self, category=None):
        """Suggest a random food from a specific category or from all foods."""
        if category is None:
            # Ask user which category they want a suggestion from
            print("\nWhich category would you like a suggestion from?")
            print("1. Favorites")
            print("2. Any food (including neutral)")
            print("3. Least favorites (if you're feeling adventurous)")
            
            choice = input("Enter your choice (1-3): ")
            
            if choice == "1":
                category = "favorites"
            elif choice == "2":
                category = "all"
            elif choice == "3":
                category = "least_favorites"
            else:
                print("Invalid choice. Suggesting from all foods.")
                category = "all"
        
        if category == "all":
            # Combine all foods
            all_foods = (self.food_database["favorites"] + 
                         self.food_database["neutral"] + 
                         self.food_database["least_favorites"])
            
            if all_foods:
                suggestion = random.choice(all_foods)
                rating = self.food_database["ratings"].get(suggestion, "Not rated")
                print(f"\nSuggestion: {suggestion.title()} (Rating: {rating}/10)")
            else:
                print("\nYou haven't added any foods yet!")
        else:
            # Suggest from specific category
            if self.food_database[category]:
                suggestion = random.choice(self.food_database[category])
                rating = self.food_database["ratings"].get(suggestion, "Not rated")
                print(f"\nSuggestion from {category}: {suggestion.title()} (Rating: {rating}/10)")
            else:
                print(f"\nYou don't have any foods in your {category} category yet!")

    def list_foods(self, category=None):
        """List all foods in a specific category or all categories."""
        if category is None:
            # Display all categories
            self._display_category("favorites", "Your Favorite Foods")
            self._display_category("neutral", "Your Neutral Foods")
            self._display_category("least_favorites", "Your Least Favorite Foods")
        else:
            # Display only the specified category
            category_titles = {
                "favorites": "Your Favorite Foods",
                "neutral": "Your Neutral Foods", 
                "least_favorites": "Your Least Favorite Foods"
            }
            if category in category_titles:
                self._display_category(category, category_titles[category])
            else:
                print(f"Category '{category}' does not exist.")
    
    def _display_category(self, category, title):
        """Helper method to display foods in a category with their ratings."""
        print(f"\n=== {title} ===")
        if self.food_database[category]:
            for food in sorted(self.food_database[category]):
                rating = self.food_database["ratings"].get(food, "Not rated")
                print(f"- {food.title()} (Rating: {rating}/10)")
        else:
            print("No foods in this category yet.")
    
    def search_food(self, query):
        """Search for a food by name across all categories."""
        query = query.lower().strip()
        found = False
        
        for category in ["favorites", "neutral", "least_favorites"]:
            for food in self.food_database[category]:
                if query in food:
                    if not found:
                        print("\nSearch results:")
                        found = True
                    
                    rating = self.food_database["ratings"].get(food, "Not rated")
                    category_name = category.replace("_", " ").title()
                    print(f"- {food.title()} (Category: {category_name}, Rating: {rating}/10)")
        
        if not found:
            print(f"No foods found matching '{query}'.")
    
    def get_statistics(self):
        """Display statistics about the user's food preferences."""
        total_foods = (len(self.food_database["favorites"]) + 
                      len(self.food_database["neutral"]) + 
                      len(self.food_database["least_favorites"]))
        
        print("\n=== Food Preference Statistics ===")
        print(f"Total foods tracked: {total_foods}")
        print(f"Favorite foods: {len(self.food_database['favorites'])}")
        print(f"Neutral foods: {len(self.food_database['neutral'])}")
        print(f"Least favorite foods: {len(self.food_database['least_favorites'])}")
        
        # Calculate average rating if there are any ratings
        if self.food_database["ratings"]:
            avg_rating = sum(self.food_database["ratings"].values()) / len(self.food_database["ratings"])
            print(f"Average food rating: {avg_rating:.1f}/10")
        
        # Find top rated food
        if self.food_database["ratings"]:
            top_food = max(self.food_database["ratings"].items(), key=lambda x: x[1])
            print(f"Highest rated food: {top_food[0].title()} ({top_food[1]}/10)")


def display_menu():
    """Display the main menu for the Food Preference Tracker application."""
    print("\n" + "="*40)
    print("    FOOD PREFERENCE TRACKER")
    print("="*40)
    print("1. Add a new food")
    print("2. Remove a food")
    print("3. Get a food suggestion")
    print("4. List all foods")
    print("5. Search for a food")
    print("6. View statistics")
    print("7. Exit")
    print("="*40)


def main():
    """Main function to run the Food Preference Tracker application."""
    print("\nWelcome to the Food Preference Tracker!")
    print("This application helps you track and manage your food preferences.")
    
    # Create food tracker instance
    tracker = FoodPreferenceTracker()
    
    while True:
        display_menu()
        choice = input("\nEnter your choice (1-7): ")
        
        if choice == "1":
            food_name = input("\nEnter the name of the food: ")
            tracker.add_food(food_name)
        
        elif choice == "2":
            food_name = input("\nEnter the name of the food to remove: ")
            tracker.remove_food(food_name)
        
        elif choice == "3":
            tracker.suggest_food()
        
        elif choice == "4":
            print("\nWhich category would you like to view?")
            print("1. All categories")
            print("2. Favorites only")
            print("3. Neutral only")
            print("4. Least favorites only")
            
            view_choice = input("Enter your choice (1-4): ")
            
            if view_choice == "1":
                tracker.list_foods()
            elif view_choice == "2":
                tracker.list_foods("favorites")
            elif view_choice == "3":
                tracker.list_foods("neutral")
            elif view_choice == "4":
                tracker.list_foods("least_favorites")
            else:
                print("Invalid choice. Showing all categories.")
                tracker.list_foods()
        
        elif choice == "5":
            query = input("\nEnter search term: ")
            tracker.search_food(query)
        
        elif choice == "6":
            tracker.get_statistics()
        
        elif choice == "7":
            print("\nThank you for using the Food Preference Tracker!")
            print("Your preferences have been saved.")
            break
        
        else:
            print("\nInvalid choice. Please enter a number between 1 and 7.")
        
        input("\nPress Enter to continue...")


if __name__ == "__main__":
    main()
